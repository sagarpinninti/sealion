// For Library Version: 1.122.0

declare namespace sap {
  namespace fe {
    /**
     * Library containing the building blocks for SAP Fiori elements.
     */
    namespace macros {
      namespace chart {
        /**
         * Definition of a custom action to be used in the chart toolbar
         */
        class Action
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}
        /**
         * Definition of a custom action group to be used inside the chart toolbar
         */
        class ActionGroup
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}
      }

      namespace filterBar {
        /**
         * Definition of a custom filter to be used inside the FilterBar.
         * The template for the FilterField has to be provided as the default aggregation
         */
        class FilterField
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}
      }

      namespace share {
        /**
         * Share Options.
         */
        type ShareOptions = {};
      }

      namespace table {
        /**
         * Definition of a custom action to be used inside the table toolbar
         */
        class Action
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}
        /**
         * Definition of a custom ActionGroup to be used inside the table toolbar
         */
        class ActionGroup
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}
        /**
         * Definition of a custom column to be used inside the table.
         * The template for the column has to be provided as the default aggregation
         */
        class Column
          /* was: sap.fe.macros.controls.BuildingBlockObjectProperty */ extends Object {}

        /**
         * Create options for the table.
         */
        type TableCreationOptions = {
          /**
           * Specifies if the new entry should be created at the top or bottom of a table in case of creationMode
           * 'Inline'
           *
           * The default value is 'false'
           */
          createAtEnd: boolean;
          /**
           * Specifies if the new entry should be hidden in case of creationMode 'InlineCreationRows'. This only applies
           * to responsive tables.
           *
           * The default value is 'false'
           */
          inlineCreationRowsHiddenInEditMode: boolean;
          /**
           * Defines the creation mode to be used by the table.
           * Allowed values are `NewPage`, `Inline`, `InlineCreationsRows` or `External`.
           *
           *
           *
           * NewPage - the created document is shown in a new page, depending on whether metadata 'Sync', 'Async'
           * or 'Deferred' is used
           *
           * Inline - The creation is done inline
           *
           * InlineCreationsRows - The creation is done inline with an empty row
           *
           * External - The creation is done in a different application specified via the parameter 'outbound'
           * If not set with any value:
           *
           * if navigation is defined, the default value is 'NewPage'. Otherwise it is 'Inline'.
           */
          name: string;
          /**
           * The navigation target where the document is created in case of creationMode 'External'
           */
          outbound: string;
        };
      }

      interface $FlexibleColumnLayoutActionsSettings
        extends sap.ui.core.$ControlSettings {}

      interface $FormSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The title of the form control.
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $FormElementSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Label shown for the field. If not set, the label from the annotations will be shown.
         */
        label?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * If set to false, the FormElement is not rendered.
         */
        visible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Optional aggregation of controls that should be displayed inside the FormElement.
         * If not set, a default Field building block will be rendered
         */
        fields?: sap.ui.core.Control;
      }

      interface $KPITagSettings extends sap.ui.core.$ControlSettings {
        /**
         * The Number to be displayed.
         */
        number?:
          | number
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * An event is triggered when the KPI is pressed.
         */
        press?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set it to `true` if the KPI should display its status icon.
         */
        showIcon?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The Status to be displayed.
         */
        status?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Text to be displayed.
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Tooltip to be displayed.
         */
        tooltip?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Unit of Measure of the number to be displayed.
         */
        unit?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $MicroChartSettings extends sap.ui.core.$ControlSettings {}

      interface $MultiValueFieldSettings extends sap.ui.core.$ControlSettings {
        /**
         * The context path provided for the MultiValueField
         */
        contextPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative Metadata path to the MultiValueField.
         * The metaPath should point to a Property or DataField.
         */
        metaPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The readOnly flag
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      interface $PaginatorSettings extends sap.ui.core.$ControlSettings {
        /**
         * Title of the object that is readout by screen readers when the next/previous item is loaded via keyboard
         * focus on the paginator button.
         */
        ariaTitle?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RichTextEditorWithMetadataSettings
        extends sap.ui.core.$ControlSettings {
        /**
         * With the 'buttonGroups' attribute, you can customize the buttons that are displayed on the toolbar of
         * the editor.
         */
        buttonGroups?:
          | any[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The context path of the property displayed
         */
        contextPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * With the 'excludeDefaultPlugins' you can ask to remove the plugins that will be added by default
         * The default plugins are "emoticons" "directionality" "image" "table" "link" "powerpaste".
         */
        excludeDefaultPlugins?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The metaPath of the displayed property
         */
        metaPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * With the 'plugins' attribute you can customize the plugins that will be loaded by the editor.
         */
        plugins?:
          | any[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Use the readOnly attribute to override the edit flow of the page.
         * By setting 'readOnly' to true, a FormattedText is displayed instead of the editor.
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Use the 'required' attribute, to make sure that the editor is filled with some text.
         */
        required?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      interface $ShareSettings extends sap.ui.core.$ControlSettings {
        /**
         * Supported Share options {@link sap.fe.macros.share.ShareOptions }.
         */
        shareOptions?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Whether the share control should be visible on the screen.
         */
        visible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * API to add parameters to the collection binding infos.
       */
      class CollectionBindingInfo {
        /**
         * Adds a filter to the filters already present in the binding info.
         */
        addFilter(
          /**
           * The {@link sap.ui.model.Filter "filter"} to add
           */
          customFilter: sap.ui.model.Filter
        ): void;
        /**
         * Adds parameters to the select query.
         */
        addSelect(
          /**
           * The list or properties to add to the query
           */
          parameters: string[]
        ): void;
        /**
         * Adds a sorter to the sorter(s) already present, or create one if none exists.
         */
        addSorter(
          /**
           * The {@link sap.ui.model.Sorter "sorter"} to add to the query
           */
          sorter: sap.ui.model.Sorter
        ): void;
        /**
         * Retrieve the 'serialized' binding info, useful if you want to create your own binding
         *
         *
         * @returns The {@link sap.fe.macros.CollectionBindingInfo "CollectionBindingInfo"}
         */
        getBindingInfo(): /* was: sap.fe.macros.CollectionBindingInfo.CollectionBindingInfo */ any;
        /**
         * Returns the current filters applied to the Table.
         *
         *
         * @returns The {@link sap.ui.model.Filter "filters"} on the table
         */
        getFilters(): sap.ui.model.Filter | undefined;
        /**
         * Returns the current sorters of the Table.
         *
         *
         * @returns The {@link sap.ui.model.Sorter "sorters"} on the table
         */
        getSorters(): sap.ui.model.Sorter[] | undefined;
      }
      /**
       * Base API control for building blocks.
       */
      class MacroAPI
        /* was: sap.fe.core.buildingBlocks.BuildingBlockBase */ extends Object
        implements sap.ui.core.IFormContent {
        __implements__sap_ui_core_IFormContent: boolean;
      }
      /**
       * Building block that exposes the RichTextEditor UI5 control.
       * It's used to enter formatted text, and uses the third-party component called TinyMCE.
       *
       *
       * @since 1.117.0
       */
      class RichTextEditor
        /* was: sap.fe.core.buildingBlocks.BuildingBlockBase */ extends Object {}
      /**
       * Building block used to create a chart based on the metadata provided by OData V4.
       *
       *
       * Usually, a contextPath and metaPath is expected.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Chart id="Mychart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" />
       * ```
       */
      class Chart extends sap.fe.macros.MacroAPI {
        /**
         * Gets the key of the current variant in the associated variant management.
         *
         *
         * @returns Variant key of {@link sap.ui.fl.variants.VariantManagement } applied to the chart
         */
        getCurrentVariantKey(): null | string;
        /**
         * Get the presentation variant that is currently applied on the chart.
         *
         *
         * @returns The presentation variant {@link sap.fe.navigation.PresentationVariant } applied to the chart
         */
        getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
        /**
         * Gets contexts from the chart that have been selected by the user.
         *
         *
         * @returns Contexts of the rows selected by the user
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Sets the variant of the provided key in the associated variant management.
         */
        setCurrentVariantKey(
          /**
           * The variant key of {@link sap.ui.fl.variants.VariantManagement } to be set
           */
          key: string
        ): void;
        /**
         * Set the presentation variant for the mdc chart.
         * The json format retrieved by using the get PresentationVariant button in the linked FPM sample should
         * be followed while trying to set the PresentationVariant as needed.
         * The values dimensions, measures and other properties should also be given in the valid format and null
         * or empty values should be avoided.
         * One dimension attribute should have only one role associated with it on a given chart.
         */
        setPresentationVariant(
          /**
           * the presentation variant {@link sap.fe.navigation.PresentationVariant } to be set
           */
          presentationVariant: sap.fe.navigation.PresentationVariant
        ): Promise<void>;
      }
      /**
       * Building block for adding overflow toolbar buttons to integrate into the flexible column layout support
       * from Fiori elements.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:FlexibleColumnLayoutActions />
       * ```
       *
       *
       *
       * @since 1.93.0
       */
      class FlexibleColumnLayoutActions extends sap.ui.core.Control {}
      /**
       * Building block for creating a field based on the metadata provided by OData V4.
       *
       *
       * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a
       * property from the entity type.
       * When creating a Field building block, you must provide an ID to ensure everything works correctly.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Field id="MyField" metaPath="MyProperty" />
       * ```
       */
      class Field extends sap.fe.macros.MacroAPI {
        /**
         * Adds a message to the field.
         *
         *
         * @returns The id of the message
         */
        addMessage(
          /**
           * The parameters to create message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Type of the message
             */
            type?: sap.ui.core.MessageType;
          }
        ): string;
        /**
         * Gets the current enablement state of the field.
         *
         *
         * @returns Boolean value with the enablement state
         */
        getEnabled(): boolean;
        /**
         * Retrieves the current value of the field.
         *
         *
         * @returns The current value of the field
         */
        getValue(): boolean | string;
        /**
         * Removes a message from the field.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
        /**
         * Sets the current enablement state of the field.
         *
         *
         * @returns The current field reference
         */
        setEnabled(): sap.ui.core.Control;
        /**
         * Sets the current value of the field.
         *
         *
         * @returns The current field reference
         */
        setValue(): sap.ui.core.Control;
      }
      /**
       * Building block for creating a FilterBar based on the metadata provided by OData V4.
       *
       *
       * Usually, a SelectionFields annotation is expected.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:FilterBar id="MyFilterBar" metaPath="@com.sap.vocabularies.UI.v1.SelectionFields" />
       * ```
       */
      class FilterBar extends sap.fe.macros.MacroAPI {
        /**
         * Get the Active Filters Text Summary for the filter bar.
         *
         *
         * @returns Active filters summary as text
         */
        getActiveFiltersText(): string;
        /**
         * Gets the key of the current variant in the associated variant management.
         *
         *
         * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
         */
        getCurrentVariantKey(): null | string;
        /**
         * Determines whether the field is enabled or disabled.
         *
         *
         * @returns Whether the filterField is enabled or disabled.
         */
        getFilterFieldEnabled(
          /**
           * Name of the field.
           */
          name: string
        ): boolean;
        /**
         * Gets the visibility of a filter field.
         *
         *
         * @returns A {@link Promise } that resolves to check whether the filter field is visible or not.
         */
        getFilterFieldVisible(
          /**
           * The path to the property as a condition path
           */
          conditionPath: string
        ): Promise<boolean>;
        /**
         * Provides all the filters that are currently active
         * along with the search expression.
         *
         *
         * @returns An array of active filters and the search expression.
         */
        getFilters(): object;
        /**
         * Get the selection variant from the filter bar.
         *
         *
         * @returns A promise which resolves with a {@link sap.fe.navigation.SelectionVariant }
         */
        getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
        /**
         * Sets the new selected variant in the associated variant management.
         */
        setCurrentVariantKey(
          /**
           * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
           * ignored.
           */
          key: string
        ): void;
        /**
         * Sets the enablement of the field.
         */
        setFilterFieldEnabled(
          /**
           * Name of the field that should be enabled or disabled.
           */
          name: string,
          /**
           * Whether the field should be enabled or disabled.
           */
          enabled: boolean
        ): void;
        /**
         * Shows or hides any filter field from the filter bar.
         * The property will not be hidden inside the adaptation dialog and may be re-added.
         *
         *
         * @returns A {@link Promise } resolving once the change in visibility was applied
         */
        setFilterFieldVisible(
          /**
           * The path to the property as a condition path
           */
          conditionPath: string,
          /**
           * Whether it should be shown or hidden
           */
          visible: boolean
        ): Promise<void>;
        /**
         * Set the filter values for the given property in the filter bar.
         * The filter values can be either a single value or an array of values.
         * Each filter value must be represented as a primitive value.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setFilterValues(
          /**
           * The path to the property as a condition path
           */
          sConditionPath: string,
          /**
           * The operator to be used (optional) - if not set, the default operator (EQ) will be used
           */
          sOperator: string | undefined,
          /**
           * The values to be applied
           */
          vValues?:
            | boolean
            | boolean[]
            | number
            | number[]
            | string
            | string[]
            | undefined
        ): Promise<void>;
        /**
         * Sets {@link sap.fe.navigation.SelectionVariant } to the filter bar. Note: setSelectionVariant will clear
         * existing filters and then apply the SelectionVariant values.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setSelectionVariant(
          /**
           * The {@link sap.fe.navigation.SelectionVariant } to apply to the filter bar
           */
          selectionVariant: sap.fe.navigation.SelectionVariant,
          /**
           * Optional. If true, we will use the associated text property values (if they're available in the selectionVariant)
           * to display the filter value descriptions, instead of loading them from the backend
           */
          prefillDescriptions?: boolean
        ): Promise<any>;
        /**
         * Triggers the API search on the filter bar.
         *
         *
         * @returns Returns a promise which resolves if filter go is triggered successfully; otherwise gets rejected.
         */
        triggerSearch(): Promise<object | undefined>;
      }
      /**
       * Building block for creating a Form based on the metadata provided by OData V4.
       *
       *
       * It is designed to work based on a FieldGroup annotation but can also work if you provide a ReferenceFacet
       * or a CollectionFacet
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Form id="MyForm" metaPath="@com.sap.vocabularies.UI.v1.FieldGroup#GeneralInformation" />
       * ```
       */
      class Form extends sap.ui.core.Control {}
      /**
       * Building block used to create a form element based on the metadata provided by OData V4.
       *
       * @since 1.90.0
       */
      class FormElement extends sap.ui.core.Control {}
      /**
       * Building block used to create a KPI tag.
       */
      class KPITag extends sap.ui.core.Control {}
      /**
       * Building block used to create a MicroChart based on the metadata provided by OData V4.
       *
       * @since 1.93.0
       */
      class MicroChart extends sap.ui.core.Control {}
      /**
       * Building block for creating a MultiValueField based on the metadata provided by OData V4.
       *
       *
       * The MultiValueField can be used to display either a DataField or Property directly. It has to point to
       * a collection property.
       *
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:MultiValueField
       *   id="SomeUniqueIdentifier"
       *   contextPath="{entitySet>}"
       *   metaPath="{dataField>}"
       *  />
       * ```
       *
       *
       * @since 1.118.0
       * @experimental (since 1.118.0)
       */
      class MultiValueField extends sap.ui.core.Control {}
      /**
       * Building block used to create a paginator control.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Paginator />
       * ```
       *
       *
       *
       * @since 1.94.0
       */
      class Paginator extends sap.ui.core.Control {}
      /**
       * Metadata-driven building block that exposes the RichTextEditor UI5 control.
       * It's used to enter formatted text and uses the third-party component called TinyMCE.
       *
       *
       * @since 1.117.0
       */
      class RichTextEditorWithMetadata extends sap.ui.core.Control {}
      /**
       * Building block used to create the ‘Share’ functionality.
       *
       *
       * Please note that the 'Share in SAP Jam' option is only available on platforms that are integrated with
       * SAP Jam.
       *
       *
       * If you are consuming this macro in an environment where the SAP Fiori launchpad is not available, then
       * the 'Save as Tile' option is not visible.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Share
       * 	id="someID"
       * visible="true"
       * />
       * ```
       *
       *
       *
       * @since 1.93.0
       */
      class Share extends sap.ui.core.Control {}
      /**
       * Building block used to create a table based on the metadata provided by OData V4.
       *
       *
       * Usually, a LineItem, PresentationVariant or SelectionPresentationVariant annotation is expected, but
       * the Table building block can also be used to display an EntitySet.
       *
       *
       * If a PresentationVariant is specified, then it must have UI.LineItem as the first property of the Visualizations.
       *
       *
       * If a SelectionPresentationVariant is specified, then it must contain a valid PresentationVariant that
       * also has a UI.LineItem as the first property of the Visualizations.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Table id="MyTable" metaPath="@com.sap.vocabularies.UI.v1.LineItem" />
       * ```
       */
      class Table extends sap.fe.macros.MacroAPI {
        /**
         * Adds a message to the table.
         * The message applies to the whole table and not to an individual table row.
         *
         *
         *
         * @returns The ID of the message
         */
        addMessage(
          /**
           * The parameters to create the message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Message type
             */
            type?: sap.ui.core.MessageType;
          }
        ): string;
        /**
         * Get the variant management applied to the table.
         *
         *
         * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
         */
        getCurrentVariantKey(): null | string;
        /**
         * Get the presentation variant that is currently applied on the table.
         *
         *
         * @returns The presentation variant applied to the table
         */
        getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
        /**
         * Gets contexts from the table that have been selected by the user.
         *
         *
         * @returns Contexts of the rows selected by the user
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Requests a refresh of the table.
         */
        refresh(): void;
        /**
         * Removes a message from the table.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
        /**
         * Set a variant management to the table.
         */
        setCurrentVariantKey(
          /**
           * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
           * ignored.
           */
          key: string
        ): void;
        /**
         * Set a new presentation variant to the table.
         */
        setPresentationVariant(
          /**
           * The new presentation variant that is to be set on the table.
           */
          tablePV: sap.fe.navigation.PresentationVariant
        ): Promise<void>;
      }

      /**
       * Additional format options for the field.
       */
      type FieldFormatOptions = {
        /**
         * Defines how the field value and associated text will be displayed together.
         *
         * Allowed values are "Value", "Description", "DescriptionValue" and "ValueDescription"
         */
        displayMode: string;
        /**
         * Determines how the field should be rendered, e.g. as radio buttons.
         *
         * If not all prerequisites are met, the field will default back to the standard rendering.
         */
        fieldEditStyle: /* was: sap.fe.macros.field.FieldAPI.FieldEditStyle */ any;
        /**
         * Defines if and how the field measure will be displayed.
         *
         * Allowed values are "Hidden" and "ReadOnly"
         */
        measureDisplayMode: string;
        /**
         * Specifies if radio buttons should be rendered in a horizontal layout.
         */
        radioButtonsHorizontalLayout: boolean;
        /**
         * Defines if the date part of a date time with timezone field should be shown.
         *
         * The dateTimeOffset field must have a timezone annotation.
         * The default value is true.
         */
        showDate: boolean;
        /**
         * Defines if the time part of a date time with timezone field should be shown.
         *
         * The dateTimeOffset field must have a timezone annotation.
         * The default value is true.
         */
        showTime: boolean;
        /**
         * Defines if the timezone part of a date time with timezone field should be shown.
         *
         * The dateTimeOffset field must have a timezone annotation.
         * The default value is true.
         */
        showTimezone: boolean;
        /**
         * Defines how the full text will be displayed.
         *
         * Allowed values are "InPlace" and "Popover"
         */
        textExpandBehaviorDisplay: string;
        /**
         * Maximum number of lines for multiline texts in edit mode.
         */
        textLinesEdit: number;
        /**
         * Maximum number of characters from the beginning of the text field that are shown initially.
         */
        textMaxCharactersDisplay: number;
        /**
         * Defines the maximum number of characters for the multiline text value.
         *
         * If a multiline text exceeds the maximum number of allowed characters, the counter below the input field
         * displays the exact number.
         */
        textMaxLength: number;
        /**
         * Maximum number of lines that multiline texts in edit mode can grow to.
         */
        textMaxLines: number;
      };
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/fe/macros/chart/Action": undefined;

    "sap/fe/macros/chart/ActionGroup": undefined;

    "sap/fe/macros/chart/ChartAPI": undefined;

    "sap/fe/macros/CollectionBindingInfo": undefined;

    "sap/fe/macros/fcl/FlexibleColumnLayoutActions.block": undefined;

    "sap/fe/macros/field/FieldAPI": undefined;

    "sap/fe/macros/filterBar/FilterBarAPI": undefined;

    "sap/fe/macros/filterBar/FilterField": undefined;

    "sap/fe/macros/form/Form.block": undefined;

    "sap/fe/macros/form/FormElement.block": undefined;

    "sap/fe/macros/kpiTag/KPITag.block": undefined;

    "sap/fe/macros/library": undefined;

    "sap/fe/macros/MacroAPI": undefined;

    "sap/fe/macros/microchart/MicroChart.block": undefined;

    "sap/fe/macros/multiValueField/MultiValueField.block": undefined;

    "sap/fe/macros/paginator/Paginator.block": undefined;

    "sap/fe/macros/RichTextEditor": undefined;

    "sap/fe/macros/richtexteditor/RichTextEditorWithMetadata.block": undefined;

    "sap/fe/macros/share/Share.block": undefined;

    "sap/fe/macros/table/Action": undefined;

    "sap/fe/macros/table/ActionGroup": undefined;

    "sap/fe/macros/table/Column": undefined;

    "sap/fe/macros/table/TableAPI": undefined;
  }
}
