"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOverviewPageConfig = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const factory_1 = require("../../export/factory");
const export_1 = require("../../export/export");
const common_1 = require("../../../common");
function transferSettingsOfRef(appSchema, definitionArray, configPart, key, factory, pathHierarchy, manifest) {
    const targetDefinitionType = definitionArray[definitionArray.length - 1];
    const nextTargetDefinition = appSchema.definitions[targetDefinitionType];
    configPart[key] = (0, export_1.assignReflectMetadataRules)(factory, key, configPart[key], targetDefinitionType);
    //transfer settings:
    pathHierarchy.push(key);
    processOvpProperties(factory, configPart[key], manifest, nextTargetDefinition.properties, appSchema, pathHierarchy);
}
/**
 * Resolves the reference of an object-type property and starts the transfer of the properties to the config.
 * @param {{ [key: string]: any }} configPart - current part of the config JSON
 * @param {string} key - property key of parent
 * @param {Definition} schemaProperties - current properties' list of a definition from app schema
 * @param {Definition} appSchema - the complete app schema
 * @param {MetadataInstanceInterface} factory - Metadata factory
 * @param {string[]} pathHierarchy - Parts of the path or breadcrumbs
 * @param {Manifest} manifest - manifest.json or app descriptor
 */
function processPropertiesOfObject(configPart, key, schemaProperties, appSchema, factory, pathHierarchy, manifest) {
    if (schemaProperties[key].$ref) {
        configPart[key] = {};
        const definitionArray = schemaProperties[key].$ref.split(common_1.DEFINITION_LINK_PREFIX);
        transferSettingsOfRef(appSchema, definitionArray, configPart, key, factory, pathHierarchy, manifest);
    }
    else if (key === 'settings' && schemaProperties[key].anyOf) {
        configPart[key] = {};
        const ref = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.v2.cardTemplateSettingsMap[configPart.template]}`;
        const definitionArray = ref.split(common_1.DEFINITION_LINK_PREFIX);
        transferSettingsOfRef(appSchema, definitionArray, configPart, key, factory, pathHierarchy, manifest);
    }
}
/**
 * Imports a single sap.ovp property into the config
 * @param { [key: string]: object } configPart - part of the config JSON, to be updated
 * @param {string} key - key of the property
 * @param {string[]} pathHierarchy - Parts of the path or breadcrumbs
 * @param {Manifest} manifest - manifest.json or app descriptor
 * @param {Definition} schemaProperties - current properties' list of a definition from app schema
 * @param {Definition} appSchema - the complete app schema
 * @param {MetadataInstanceInterface} factory - Metadata factory
 */
function processOvpProperty(configPart, key, pathHierarchy, manifest, schemaProperties, appSchema, factory) {
    const syncRule = (0, decorators_1.getReflectMetadata)(configPart, key);
    if (syncRule?.manifest) {
        const path = syncRule.manifest.path([...pathHierarchy, key]);
        const manifestSection = (0, manifest_1.ensureManifestSectionByPathV2)(manifest, path);
        if (Object.prototype.hasOwnProperty.call(manifestSection, key)) {
            (0, common_1.importProperty)(syncRule, manifestSection, key, configPart);
        }
    }
    else if (key !== 'cards' && key !== '$schema' && typeof schemaProperties[key] === 'object') {
        processPropertiesOfObject(configPart, key, schemaProperties, appSchema, factory, pathHierarchy, manifest);
    }
}
/**
 * Handles a list of properties of a given part of the schema, transfers the relevant property values or settings from manifest to config.
 * @param {MetadataInstanceInterface} factory - Metadata factory
 * @param {{ [key: string]: any }} configPart - current part of the config JSON
 * @param {Manifest} manifest - manifest.json or app descriptor
 * @param {Definition} schemaProperties - current properties' list of a definition from app schema
 * @param {Definition} appSchema - the complete app schema
 * @param {string[]} pathHierarchy - Parts of the path or breadcrumbs
 */
function processOvpProperties(factory, configPart, manifest, schemaProperties, appSchema, pathHierarchy) {
    for (const key in schemaProperties) {
        processOvpProperty(configPart, key, pathHierarchy, manifest, schemaProperties, appSchema, factory);
    }
}
/**
 * OVP: Transfers all settings from manifest to config
 * @param pageConfig - the OVP configuration (JSON)
 * @param manifest  - manifest.json or app descriptor
 * @param appSchema - app specific JSON schema
 * @param factory - Metadata factory
 */
function addSettings(pageConfig, manifest, appSchema, factory) {
    processOvpProperties(factory, pageConfig, manifest, appSchema.properties, appSchema, []);
    pageConfig.cards = {};
    Object.keys(manifest[ux_specification_types_1.ManifestSection.ovp]['cards']).forEach((cardId) => {
        const cardTemplate = manifest[ux_specification_types_1.ManifestSection.ovp]['cards'][cardId].template;
        const cardType = ux_specification_types_1.v2.cardTemplateTypeMap[cardTemplate] ?? 'CustomCard';
        //instantiate Card:
        pageConfig.cards[cardId] = (0, export_1.assignReflectMetadataRules)(factory, cardType, {}, 'CustomCard');
        pageConfig.cards = (0, export_1.assignReflectMetadataRules)(factory, cardType, pageConfig.cards, 'CustomCard');
        //transfer settings:
        processOvpProperties(factory, pageConfig.cards[cardId], manifest, appSchema.definitions[cardType].properties, appSchema, [cardId]);
    });
}
/**
 * Creates the configuration (file content) for an overview page
 * @param {object} manifest  - manifest of the app
 * @param {object} jsonSchema - app specific JSON schema
 *
 * @returns {object} - the OVP configuration (JSON)
 */
function createOverviewPageConfig(importParameters) {
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(ux_specification_types_1.PageTypeV2.OverviewPage);
    if (importParameters.jsonSchema) {
        addSettings(config, importParameters.manifest, importParameters.jsonSchema, factory);
    }
    return config;
}
exports.createOverviewPageConfig = createOverviewPageConfig;
//# sourceMappingURL=overviewPage.js.map